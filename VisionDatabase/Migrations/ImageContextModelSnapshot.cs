// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VisionDatabase.DbModels;

namespace VisionDatabase.Migrations
{
    [DbContext(typeof(ImageContext))]
    partial class ImageContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("VisionDatabase.DbModels.Content", b =>
                {
                    b.Property<long>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ContentId")
                        .HasColumnType("bigint");

                    b.Property<string>("ContentDescription")
                        .HasColumnName("ContentDescription");

                    b.Property<int>("Height")
                        .HasColumnName("Height")
                        .HasColumnType("int");

                    b.Property<string>("ImageId")
                        .IsRequired()
                        .HasColumnName("ImageId")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Width")
                        .HasColumnName("Width")
                        .HasColumnType("int");

                    b.Property<int>("X")
                        .HasColumnName("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnName("Y")
                        .HasColumnType("int");

                    b.HasKey("ContentId");

                    b.HasIndex("ImageId");

                    b.ToTable("Content");
                });

            modelBuilder.Entity("VisionDatabase.DbModels.Image", b =>
                {
                    b.Property<string>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ImageId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CorrelationId")
                        .HasColumnName("CorrelationId")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<DateTime>("EventTime")
                        .HasColumnName("EventTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Filename")
                        .HasColumnName("Filename")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ImageLocation")
                        .HasColumnName("ImageLocation")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("SequenceNumber")
                        .HasColumnName("SequenceNumber")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .HasColumnName("Source")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ImageId");

                    b.HasIndex("CorrelationId");

                    b.HasIndex("Filename")
                        .IsUnique();

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.ToTable("Image");
                });

            modelBuilder.Entity("VisionDatabase.DbModels.Content", b =>
                {
                    b.HasOne("VisionDatabase.DbModels.Image")
                        .WithMany("Contents")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
